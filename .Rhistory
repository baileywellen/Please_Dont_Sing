M = median(s);
m = mean(s)
if(n == 111) return(median(abs(M-s)))
if(n == 121) return(sqrt(median((M-s)^2)))
if(n == 211) return(median(abs(m-s)))
if(n == 221) return(sqrt(median((m-s)^2)))
if(n == 112) return(mean(abs(M-s)))
if(n == 122) return(sqrt(mean((M-s)^2)))
if(n == 212) return(mean(abs(m-s)))
if(n == 222) return(sqrt(mean((m-s)^2)))
}
num <- c(111,121,211,221,112,122,212,222)
s <- c(1,2,2,2,3)
round(sapply(num,mvar),3)
mvar <- function(n){
M = median(s);
m = mean(s)
if(n == 111) return(median(abs(M-s)))
if(n == 121) return(sqrt(median((M-s)^2)))
if(n == 211) return(median(abs(m-s)))
if(n == 221) return(sqrt(median((m-s)^2)))
if(n == 112) return(mean(abs(M-s)))
if(n == 122) return(sqrt(mean((M-s)^2)))
if(n == 212) return(mean(abs(m-s)))
if(n == 222) return(sqrt(mean((m-s)^2)))
}
num <- c(111,121,211,221,112,122,212,222)
#s <- c(1,2,2,2,3)
round(sapply(num,mvar),3)
#Define function returning the result of one trial:
experiment <- function(){
return(sum(sample(0:1,10,replace=T)))
}
#Declare frequency vector initialized to zeros:
freq <- vector("integer", 11)   #R vectors use 1-based indices
#Iterate over trials, incrementing frequencies:
for(trial in 1:10000){
temp <- experiment()
freq[temp+1] <- freq[temp+1]+1
}
names(freq)<-0:10           #Make into a named vector for bar plot labels
barplot(freq/10000, las=1)  #Actual plotting command
#Define function returning the result of one trial:
experiment <- function(){
return(sum(sample(0:1,12,replace=T)))
}
#Declare frequency vector initialized to zeros:
freq <- vector("integer", 13)   #R vectors use 1-based indices
#Iterate over trials, incrementing frequencies:
for(trial in 1:10000){
temp <- experiment()
freq[temp+1] <- freq[temp+1]+1
}
names(freq)<-0:12           #Make into a named vector for bar plot labels
barplot(freq/10000, las=1)  #Actual plotting command
#Define function returning the result of one trial:
experiment <- function(){
return(sum(sample(0:1,12,replace=T)))
}
#Declare frequency vector initialized to zeros:
freq <- vector("integer", 11)   #R vectors use 1-based indices
#Iterate over trials, incrementing frequencies:
for(trial in 1:10000){
temp <- experiment()
freq[temp+1] <- freq[temp+1]+1
}
names(freq)<-0:12           #Make into a named vector for bar plot labels
#Define function returning the result of one trial:
experiment <- function(){
return(sum(sample(0:1,12,replace=T)))
}
#Declare frequency vector initialized to zeros:
freq <- vector("integer", 13)   #R vectors use 1-based indices
#Iterate over trials, incrementing frequencies:
for(trial in 1:10000){
temp <- experiment()
freq[temp+1] <- freq[temp+1]+1
}
names(freq)<-0:12           #Make into a named vector for bar plot labels
barplot(freq/10000, las=1)  #Actual plotting command
install.packages('rsconnect')
rsconnect::setAccountInfo(name='baileywellen', token='1E8D5E9646CD97929EA5BBAB421D0924', secret='bPd9BdscdlUHs6lzN6ZsC6BayLVkBHJnHpCKzrwi')
rsconnect::setAccountInfo(name='baileywellen', token='1E8D5E9646CD97929EA5BBAB421D0924', secret='bPd9BdscdlUHs6lzN6ZsC6BayLVkBHJnHpCKzrwi')
#Knit the two objects together into a Shiny App
shinyApp(ui = ui, server = server)
#install.packages('rsconnect')
install.packages('shiny')
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
#install.packages('rsconnect')
install.packages('shinythemes')
library(readxl)
fatal_police_shootings <- read_excel("C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/fatal-police-shootings.csv")
View(fatal_police_shootings)
library(readxl)
police_shootings <- read_excel("C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/fatal-police-shootings.xlsx")
View(police_shootings)
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
#install.packages('rsconnect')
install.packages('shinydashboard')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
#install.packages('rsconnect')
install.packages('dplyr')
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
#install.packages('rsconnect')
install.packages('dplyr')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
library(rsconnect)
rsconnect::deployApp('C:\Users\baile\OneDrive\Desktop\Personal\Personal Code Projects\Police Fatal Shootings Dashboard.R')
library(rsconnect)
rsconnect::deployApp('C:\\Users\baile\OneDrive\Desktop\Personal\Personal Code Projects\Police Fatal Shootings Dashboard.R')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\baile\\OneDrive\\Desktop\\Personal\\Personal Code Projects\\Police Fatal Shootings Dashboard.R')
library(rsconnect)
rsconnect::setAccountInfo(name='baileywellen', token='1E8D5E9646CD97929EA5BBAB421D0924', secret='bPd9BdscdlUHs6lzN6ZsC6BayLVkBHJnHpCKzrwi')
rsconnect::deployApp('C:\\Users\\baile\\OneDrive\\Desktop\\Personal\\Personal Code Projects\\Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
#Define function returning the result of one trial:
experiment <- function(){
return(sum(sample(0:1,12,replace=T)))
}
#Declare frequency vector initialized to zeros:
freq <- vector("integer", 13)   #R vectors use 1-based indices
#Iterate over trials, incrementing frequencies:
for(trial in 1:10000){
temp <- experiment()
freq[temp+1] <- freq[temp+1]+1
}
names(freq)<-0:12           #Make into a named vector for bar plot labels
barplot(freq/10000, las=1)  #Actual plotting command
var <- 1
print(var)
var <- 1
print(var)
var <- 1
print(var)
var <- var + 1
print(var)
mtcars
seq(1,32,2)
seq(1,32,2)
mtcars$wt[seq]
seq(1,32,2)
mtcars$wt
seq(1,32,2)
mtcars$wt[1]
seq(1,32,2)
mtcars$wt[1,2]
seq(1,32,2)
n <- seq(1,32,2)
mtcars$wt[n]
n <- seq(1,32,2)
mtcars$wt[seq(1,32,2)]
n <- seq(1,32,2)
n
mtcars$wt[seq(1,32,2)]
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
import.packages("Shinywidgets")
install.packages("shinywidgets")
install.packages("shinyWidgets")
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
#Knit the two objects together into a Shiny App
shinyApp(ui = ui, server = server)
#This code was written to teach Carthage College Data Science Club about R Shiny dasboards
#Plot mtcars data
#import the library
library(shiny)
#Sets up a UI Object
ui <- fluidPage(
selectInput(inputId = "cartype", label= "Car Type", choices = row.names(mtcars)),
textOutput(outputId = "carinfo"),
tableOutput(outputId = "cartable")
)
#Sets up a Server Object
server <- function(input, output) {
#Display their choice
output$carinfo <- renderText({
paste("You chose", input$cartype)
})
#Make a datatable of the row they chose
output$cartable <- renderTable({
mtcars[input$cartype,]
})
}
#Knit the two objects together into a Shiny App
shinyApp(ui = ui, server = server)
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
runApp('C:/Users/baile/OneDrive/Desktop/Personal/Personal Code Projects/Police Fatal Shootings Dashboard.R')
install.packages("googlesheets")
library(googlesheets)
gs_auth (new_user = TRUE)
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Google_sheets.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Google_sheets.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Google_sheets.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Google_sheets.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Google_sheets.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Google_sheets.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Google_sheets.R')
.libpaths()
.linPaths()
.libPaths()
install.packages(installR)
install.packages("installr")
library(installr)
updateR90
updateR()
air_quality <- read_csv("hourly_42101_2020.csv")
library(readR)
install.packages("readR")
library(readr)
install.packages("readr")
library(readr)
air_quality <- read_csv("hourly_42101_2020.csv")
View(air_quality)
View(air_quality)
library(readr)
library(dplyr)
install.packages("dplyr")
library(readr)
library(dplyr)
air_quality <- read_csv("hourly_42101_2020.csv")
air_quality %>% group_by(Latitude, Longitude) %>%  summarize(value = `Sample Measurement`, .groups = "drop")
air_quality %>% group_by(Latitude, Longitude) %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
write_csv(grouped_air_quality, row.names = FALSE)
write.csv(grouped_air_quality, row.names = FALSE)
#Group by the location that Carbon Monoxide was detected and calculate the sum of the measurements over the year
grouped_air_quality <- air_quality %>% group_by(Latitude, Longitude) %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
grouped_air_quality
write.csv(grouped_air_quality, row.names = FALSE)
write.csv(grouped_air_quality, "grouped_cO_2020.csv", row.names = FALSE)
state_air_quality <- air_quality %>% group_by('State Name') %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
state_air_quality
#state_air_quality <- air_quality %>% group_by('State Name') %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
#state_air_quality
air_quality$`State Name`
#state_air_quality <- air_quality %>% group_by('State Name') %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
#state_air_quality
unique(air_quality$`State Name`)
state_air_quality <- air_quality %>% group_by('State Name') %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
#state_air_quality
state_air_quality <- air_quality %>% group_by('State Name') %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
state_air_quality
state_air_quality <- air_quality %>% group_by(air_quality$State Name) %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
state_air_quality <- air_quality %>% group_by(air_quality$'State Name') %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
state_air_quality
state_air_quality <- air_quality %>% group_by(air_quality$'State Name') %>%  summarize(value = sum(`Sample Measurement`), .groups = "drop")
write.csv(state_air_quality, "state_cO_2020.csv", row.names = FALSE)
install.packages("shinyjs")
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Google_sheets.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
# trigger auth on purpose --> store a token in the specified cache
gs4_auth()
library(shiny)
library(DT)
library(googlesheets4)
library(shinyjs)
#--------------------------------------------------------------------------------------------------------------------------------------------
#I CANNOT HAVE THIS IN THE REACTIVE LOOP
# THE GOOGLE SHEETS API HAS A LIMIT OF 100 requests per 100 seconds per user
#https://developers.google.com/sheets/api/limits
#our_sheet <- gs4_get("https://docs.google.com/spreadsheets/d/1swdg--kas3IDy6BLGL05hvVBjArQcsv10BaLO3iNthM/edit?usp=sharing")
#review_data <- read_sheet("https://docs.google.com/spreadsheets/d/1swdg--kas3IDy6BLGL05hvVBjArQcsv10BaLO3iNthM/edit?usp=sharing")
# how to use google sheets for Persistent Data Storage -------------------------------------------------------------------------------------
#https://shiny.rstudio.com/articles/persistent-data-storage.html
#gs4_auth(email = "bwellen@carthage.edu")
# designate project-specific cache
options(gargle_oauth_cache = ".secrets")
# check the value of the option, if you like
gargle::gargle_oauth_cache()
# trigger auth on purpose --> store a token in the specified cache
gs4_auth()
# see your token file in the cache, if you like
list.files(".secrets/")
# our_sheet <- gs4_get("https://docs.google.com/spreadsheets/d/1swdg--kas3IDy6BLGL05hvVBjArQcsv10BaLO3iNthM/edit?usp=sharing")
#
# saveData <- function(data) {
#   # Add the data as a new row
#   sheet_append(our_sheet, data)
# }
#
# # Define the fields we want to save from the form
# fields <- c("name", "rating_id", "rating")
#
# # Shiny app with 3 fields that the user can submit data for
# shinyApp(
#   ui = fluidPage(
#     useShinyjs(),
#     textOutput(outputId = "goodbye"),
#     textInput(inputId = "name", label = "Name", value = ""),
#     textInput(inputId = "rating_id", label = "Rating id", ""),
#     sliderInput(inputId = "rating", label = "What do you rate this recording",
#                 min = 1, max = 10, value=  1, ticks = TRUE),
#     actionButton("submit", "Submit"),
#     #we will start the "start over" option as hidden
#     shinyjs::hidden( actionButton("start_over", "Want to Rate More Recordings?"))
#   ),
#   server = function(input, output, session) {
#
#     # Whenever a field is filled, aggregate all form data
#     formData <- reactive({
#       data <- data.frame("name" = input$name, "rating_id" = input$rating_id, "rating" = input$rating)
#       data
#     })
#
#     # When the Submit button is clicked, save the form data
#     observeEvent(input$submit, {
#       saveData(formData())
#       output$goodbye <- renderText("Thank you for participating! We have collected your answers. Unless you want to rate more, you can close this window now.")
#       shinyjs::hide(id = "name")
#       shinyjs::hide(id = "rating_id")
#       shinyjs::hide(id = "rating")
#       shinyjs::hide(id = "submit")
#       shinyjs::show(id = "start_over")
#
#       })
#     #if they press start over, we will reset to the settings from the beginning
#     observeEvent(input$start_over, {
#       shinyjs::show(id = "name")
#       updateTextInput(session = session, inputId = "name", label = "Name", value = "")
#       shinyjs::show(id = "rating_id")
#       updateTextInput(session = session, inputId = "rating_id", label = "Rating id", value =  "")
#       shinyjs::show(id = "rating")
#       updateSliderInput(session = session, inputId = "rating", label = "What do you rate this recording",
#                         min = 1, max = 10, value = 1)
#       shinyjs::show(id = "submit")
#       shinyjs::hide(id = "start_over")
#       shinyjs::hide(id = "goodbye")
#     })
#
#
#   }
# )
# how to use google sheets for Persistent Data Storage -------------------------------------------------------------------------------------
#https://shiny.rstudio.com/articles/persistent-data-storage.html
#gs4_auth(email = "bwellen@carthage.edu")
# designate project-specific cache
options(gargle_oauth_cache = ".secrets")
library(shiny)
library(DT)
library(googlesheets4)
library(shinyjs)
#--------------------------------------------------------------------------------------------------------------------------------------------
#I CANNOT HAVE THIS IN THE REACTIVE LOOP
# THE GOOGLE SHEETS API HAS A LIMIT OF 100 requests per 100 seconds per user
#https://developers.google.com/sheets/api/limits
#our_sheet <- gs4_get("https://docs.google.com/spreadsheets/d/1swdg--kas3IDy6BLGL05hvVBjArQcsv10BaLO3iNthM/edit?usp=sharing")
#review_data <- read_sheet("https://docs.google.com/spreadsheets/d/1swdg--kas3IDy6BLGL05hvVBjArQcsv10BaLO3iNthM/edit?usp=sharing")
# how to use google sheets for Persistent Data Storage -------------------------------------------------------------------------------------
#https://shiny.rstudio.com/articles/persistent-data-storage.html
#gs4_auth(email = "bwellen@carthage.edu")
# designate project-specific cache
options(gargle_oauth_cache = ".secrets")
# check the value of the option, if you like
gargle::gargle_oauth_cache()
# trigger auth on purpose --> store a token in the specified cache
gs4_auth()
list.files(".secrets/")
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
library(shiny)
library(DT)
library(googlesheets4)
library(shinyjs)
options(httr_oob_default=TRUE)
gs_auth(new_user = TRUE)
gs_ls()
google_app <- httr::oauth_app(
"Happy Birthday Reviews - Carthage College Capstone",
key = "842082474040-8tlmsjotpgqv2e9au92qqnocpm014n83.apps.googleusercontent.com",
secret = "9CDRldU191oP8E0fndRRIr9H"
)
gs4_auth_configure(app, path, api_key)
google_app <- httr::oauth_app(
"Happy Birthday Reviews - Carthage College Capstone",
key = "842082474040-8tlmsjotpgqv2e9au92qqnocpm014n83.apps.googleusercontent.com",
secret = "9CDRldU191oP8E0fndRRIr9H"
)
gs4_auth_configure(google_app)
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
air_index_2019 <- read.csv("C:/Users/baile/DS4A/COVID-environmental-impact/data/raw_data/daily_NO2/daily_42602_2019.csv")
air_index_2019 <- read.csv("C:/Users/baile/DS4A/COVID-environmental-impact/data/raw_data/daily_NO2/daily_42602_2019.csv")
library(tidyverse)
air_index_2019 <- read_csv("C:/Users/baile/DS4A/COVID-environmental-impact/data/raw_data/daily_NO2/daily_42602_2019.csv")
air_index_2019 <- read_csv("./data/raw_data/daily_NO2/daily_42602_2019.csv")
air_index_2019 <- read.csv("./data/raw_data/daily_NO2/daily_42602_2019.csv")
air_index_2019 <- read.csv("./data/raw_data/daily_NO2/daily_42602_2019.csv")
data <- read.csv('final_enron_gender.csv')
data
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
install.packages("googleAuthR")
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
library(shiny)
library(DT)
library(googlesheets4)
library(shinyjs)
library(gargle)
library(httr)
library(googledrive)
library(googleAuthR)
googleAuthR::gar_set_client(scopes = "https://www.googleapis.com/auth/drive")
token_fetch(scopes = "https://www.googleapis.com/auth/drive")
gs4_auth(token = my_oauth_token)
my_oauth_token = "4/5QFF82N5KbBiTPmvuWzeTPO2ilQXgdfB58P2wW1YHbuxLPD9kgX1nPo"
gs4_auth(token = my_oauth_token)
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
runApp('Collect_reviews.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
table(seconds)
sample(1,2, replace = FALSE)
sample(3, 2, replace = FALSE)
sample(10, 5, replace = FALSE)
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
few_ratings
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
few_ratings
sample(few_ratings, 3)
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
sample(few_ratings, 3)
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
sample(few_ratings, 3)
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
sample(few_ratings, 3)
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
sample(few_ratings, 3)
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
sample(few_ratings, 5, replace = F)
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
sample(few_ratings, 5, replace = F)
few_ratings <- c('recording0.mp3', 'recording17.mp3', 'recording20.mp3',
'recording23.mp3', 'recording33.mp3', 'recording34.mp3',
'recording39.mp3', 'recording6.mp3', 'recording60.mp3',
'recording66.mp3', 'recording68.mp3', 'recording70.mp3',
'recording71.mp3', 'recording72.mp3', 'recording73.mp3',
'recording75.mp3', 'recording76.mp3', 'recording78.mp3',
'recording8.mp3', 'recording80.mp3')
sample(few_ratings, 5, replace = F)
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Collect_reviews.R')
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Please_Dont_Sing/Collect_reviews.R')
library(shiny); runApp('C:/Users/baile/OneDrive/Desktop/Classes/Fall2020Classes/Thesis/Please_Dont_Sing/Collect_reviews.R')
